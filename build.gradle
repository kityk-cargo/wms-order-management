plugins {
	id 'java'
	id 'groovy'
	id 'org.springframework.boot' version '3.5.0-M3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'checkstyle'
	id 'pmd'
	id 'com.github.spotbugs' version '6.1.6'
	id 'org.springdoc.openapi-gradle-plugin' version '1.8.0'
}

group = 'cargo.kityk.wms'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url = uri("https://repo.spring.io/milestone") }
	maven { url = uri("https://repo.spring.io/snapshot") }
	mavenLocal()
}

ext {
	set('springCloudVersion', "2025.0.0-M1")
	set('pactVersion', '4.6.7')
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	
	// Explicit Liquibase dependency
	implementation 'org.liquibase:liquibase-core'
	
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.apache.groovy:groovy-all:4.0.25'
	
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	
	runtimeOnly 'org.postgresql:postgresql'
	
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'
	implementation 'org.springdoc:springdoc-openapi-starter-common:2.8.6'
	implementation 'org.apache.groovy:groovy-json:4.0.25'
	
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'com.h2database:h2'
	testImplementation 'org.testcontainers:testcontainers:1.20.5'
	testImplementation 'org.testcontainers:junit-jupiter:1.20.5'
	testImplementation 'org.testcontainers:postgresql:1.20.5'
	
	// Pact dependencies for provider testing
	testImplementation "au.com.dius.pact.provider:junit5:${pactVersion}"
	testImplementation "au.com.dius.pact.provider:spring:${pactVersion}"
	
	// Pact dependencies for consumer testing
	testImplementation "au.com.dius.pact.consumer:junit5:${pactVersion}"
	testImplementation "au.com.dius.pact.consumer:junit:${pactVersion}"

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform {
        excludeTags 'pact'
    }
}

// Add classpath inclusion for testing across all operating systems
tasks.withType(Test) {
	def liquibaseTestPath = System.getenv("LIQUIBASE_TEST_CLASSPATH") ?: "$projectDir/../wms-main/liquibase"
	classpath += files(liquibaseTestPath)
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-parameters']
}

tasks.withType(GroovyCompile) {
    options.compilerArgs += ['-parameters']
}

compileJava.dependsOn = compileJava.dependsOn.findAll { 
    it != compileGroovy 
}
compileGroovy.dependsOn compileJava
compileGroovy.classpath += files(compileJava.destinationDirectory)

checkstyle {
	toolVersion = '10.12.4'
	configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}

pmd {
	toolVersion = '6.55.0'
	ruleSets = ["category/java/bestpractices.xml", "category/java/errorprone.xml"]
}

spotbugs {
	toolVersion = '4.8.3'
	excludeFilter = file("${rootDir}/config/spotbugs/exclude.xml")
	ignoreFailures = true
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
	reports {
		xml.required = false
		html.required = true
	}
}


springBoot {
    mainClass = 'cargo.kityk.wms.order.application.OrderApplication'
}

openApi {
	outputDir = file("$buildDir/api-docs")
	outputFileName = 'openapi.json'
	waitTimeInSeconds = 120
	apiDocsUrl = "http://localhost:8080/docs"
	customBootRun {
		mainClass = 'cargo.kityk.wms.order.openapi.OpenApiGeneratorApplication'
		args = ['--spring.profiles.active=test,openapi']
	}
}

// Custom Pact verification task
task pactVerify(type: Test) {
    description = 'Runs Pact verification tests using test-based approach'
    group = 'verification'
    
    useJUnitPlatform {
        includeTags 'pact'
    }
    
    // Default to local path for Pact files
    def pactFolderPath = project.hasProperty('pactFolderPath') ? 
        project.getProperty('pactFolderPath') : 
        "${rootProject.projectDir}/../wms-contracts/pact/rest/wms_order_management"
    
    // Enable more verbose debugging
    systemProperty 'org.slf4j.simpleLogger.defaultLogLevel', 'debug'
    systemProperty 'pact.showStacktrace', 'true'
    systemProperty 'pact.verifier.disableApplicationXmlContentType', 'true'
        
    // Pact configuration
    systemProperty 'pact.provider.version', project.version
    systemProperty 'pact.verifier.publishResults', 'true'
    systemProperty 'pact.folder.path', pactFolderPath
    
    // Spring profiles
    systemProperty 'spring.profiles.active', 'test,dbIntegrationTest'
    
    // Point to existing wms-main changelog-test.xml
    def liquibaseTestPath = System.getenv("LIQUIBASE_TEST_CLASSPATH") ?: "$projectDir/../wms-main/liquibase"
    systemProperty 'spring.liquibase.change-log', "file:${liquibaseTestPath}/db/changelog-test.xml"
    
    // Set up JVM arguments for test
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = true
        showStackTraces = true
    }
    
    // Increase heap size for tests
    maxHeapSize = "1g"
    
    // Make sure this test runs in isolation
    forkEvery = 1
    
    // Environment variable for Liquibase classpath
    environment 'LIQUIBASE_TEST_CLASSPATH', liquibaseTestPath
    
    // Add wms-main/liquibase to the classpath
    classpath += files(liquibaseTestPath)
    
    // Make transformPacts task depend on this task
    finalizedBy 'transformPacts'
}

// Task to transform Pact files to the structure used by other services
task transformPacts {
    description = 'Transforms Pact files from consumer-provider.json to provider/consumer.json structure'
    group = 'verification'

    doLast {
        // Source directory with generated Pact files
        def pactsDir = file("$buildDir/pacts")
        
        // Target directory for restructured Pact files (similar to the transient branch structure)
        def targetDir = file("$buildDir/pacts-restructured")
        targetDir.mkdirs()
        
        if (pactsDir.exists()) {
            pactsDir.eachFile { pactFile ->
                if (pactFile.name.endsWith('.json')) {
                    logger.lifecycle("Processing Pact file: ${pactFile.name}")
                    
                    // Extract consumer and provider from the filename pattern: consumer-provider.json
                    def filename = pactFile.name
                    def parts = filename.replace('.json', '').split('-')
                    
                    if (parts.length >= 2) {
                        def consumerName = parts[0]
                        def providerName = parts[1]
                        
                        // Create the provider directory
                        def providerDir = new File(targetDir, "pacts/${providerName}")
                        providerDir.mkdirs()
                        
                        // Copy the file with just the consumer name
                        def targetFile = new File(providerDir, "${consumerName}.json")
                        targetFile.text = pactFile.text
                        
                        logger.lifecycle("Transformed Pact: ${filename} -> pacts/${providerName}/${consumerName}.json")
                    } else {
                        logger.warn("Unexpected Pact filename format: ${filename}, expected consumer-provider.json")
                    }
                }
            }
            
            logger.lifecycle("Pact files restructured in: $targetDir")
            logger.lifecycle("These files can be copied to the pacts-transient-do_not_touch branch for publishing")
        } else {
            logger.warn("No Pact files found in $pactsDir")
        }
    }
}
